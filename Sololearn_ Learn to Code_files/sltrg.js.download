var sltrg = {
	getQueue() { return JSON.parse(sessionStorage.getItem('trackingQueue')) || []; }, addEventToQueue(e) { const r = sltrg.getQueue(); r.push({ id: sltrg.createId(), event: e }), sessionStorage.setItem('trackingQueue', JSON.stringify(r)); }, sendEvent(e, r, t) { const n = new XMLHttpRequest(); n.open('POST', `${window.slConfig.envURLs.trackingApiHost}/api/event`, !0), n.setRequestHeader('Content-Type', 'application/json'), n.onload = r, n.onerror = t, n.send(JSON.stringify(e)); }, removeFromQueue(e) { for (var r, t = sltrg.getQueue(), n = 0; n < t.length; n++) if (t[n].id === e) { r = n; break; }t.splice(r, 1), sessionStorage.setItem('trackingQueue', JSON.stringify(t)); }, createId() { let e = new Date().getTime(); return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (r) => { const t = (e + 16 * Math.random()) % 16 | 0; return e = Math.floor(e / 16), (r == 'x' ? t : 3 & t | 8).toString(16); }); },
}; function getUserId() { const e = JSON.parse(localStorage.getItem('user')); return e ? e.data.id : null; } function slTrack(e) {
	const r = {
		experiment: e.experiment || '', action: e.action, element: e.element, page: window.location.href, referrer: document.referrer, subject: document.cookie.replace(/(?:(?:^|.*;\s*)fngprntId\s*\=\s*([^;]*).*$)|^.*$/, '$1'), userId: e.userId || getUserId(), entityId: typeof e.entityId === 'number' || typeof e.entityId === 'string' ? e.entityId : null,
	}; e.redirectUrl ? (sltrg.addEventToQueue(r), window.location.href = e.redirectUrl) : (sltrg.addEventToQueue(r), clearTrackingQueue());
} function clearTrackingQueue() { const e = sltrg.getQueue(); if (e.length) { const r = e[0].id; const t = e[0].event; sltrg.sendEvent(t, () => { clearTrackingQueue(); }), sltrg.removeFromQueue(r); } }clearTrackingQueue();
